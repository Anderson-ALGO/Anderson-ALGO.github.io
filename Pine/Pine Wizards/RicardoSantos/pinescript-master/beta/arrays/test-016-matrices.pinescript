// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© RicardoSantos

//@version=4
study("test-016-matrices")
plot(close)

// conversion examples:

// 3Dto1D ( int x, int y, int z )
    //z * xMax * yMax) + (y * xMax) + x

// 1Dto3D ( int idx ) {
    // final int z = idx / (xMax * yMax);
    // idx -= (z * xMax * yMax);
    // final int y = idx / xMax;
    // final int x = idx % xMax;
    // return new int[]{ x, y, z };

f_array_new_matrix(_M, _columns, _rows, _initial_value)=>
    array.clear(_M)
    for _i = 0 to (_columns * _rows) - 1
        array.push(id=_M, value=_initial_value)

var float[] M1 = array.new_float(size=0, initial_value=0.0)
var float[] M2 = array.new_float(size=0, initial_value=0.0)
f_array_new_matrix(M1, 3, 3, 1.0)
f_array_new_matrix(M2, 3, 3, 2.0)


f_array_matrix_multiply(_A, _B, _Acol, _Arow, _Bcol, _Brow)=>
    _R = array.new_float(size=_Arow * _Bcol, initial_value=0.0)
    int _Asize = array.size(id=_A)
    int _Bsize = array.size(id=_B)
    bool _sizes_match = (_Acol == _Brow) and (_Asize == _Acol * _Arow) and (_Bsize == _Bcol * _Brow)
    float _sum = 0.0
    if _sizes_match
        for _i = 0 to _Arow - 1
            for _j = 0 to _Bcol - 1
                _sum := 0.0
                for _k = 0 to _Acol - 1
                    _sum := _sum + array.get(id=_A, index=int(_i * _Acol + _k)) * array.get(id=_B, index=int(_k * _Bcol + _j))
                array.set(id=_R, index=int(_i * _Bcol + _j), value=_sum)
    _R

// float[] array_matrix_multiply = f_array_matrix_multiply(M1, M2, 3, 3, 3, 3)
// bool show_debug = input(false)
// var label debug = label.new(bar_index, open, '')
// if show_debug
//     label.set_xy(id=debug, x=bar_index, y=close)
//     label.set_text(id=debug, text=tostring(M1) + '\n' + tostring(M2) + '\n' + tostring(array_matrix_multiply))
// else
//     label.delete(id=debug)



f_array_matrix_transpose(_A, _Acol, _Arow)=>
    _T = array.copy(id=_A)
    int _size = array.size(id=_A)
    bool _is_compatible = _size == _Acol * _Arow
    if _is_compatible
        for _i = 0 to _Arow - 1
            for _j = 0 to _Acol - 1
                // index in the original matrix.
                int _Ai = _i * _Acol + _j
                // index in the transpose matrix.
                int _Ti = _j * _Arow + _i
                array.set(id=_T, index=_Ti, value=array.get(id=_A, index=_Ai))
    _T

array.set(id=M1, index=0, value=9)
array.set(id=M1, index=2, value=9)
array.set(id=M1, index=8, value=9)
float[] array_matrix_transpose = f_array_matrix_transpose(M1, 3, 3)
bool show_debug = input(false)
var label debug = label.new(bar_index, open, '')
if show_debug
    label.set_xy(id=debug, x=bar_index, y=close)
    label.set_text(id=debug, text=tostring(M1) + '\n' + tostring(array_matrix_transpose))
else
    label.delete(id=debug)
